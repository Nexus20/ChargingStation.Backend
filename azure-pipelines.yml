# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

parameters:
- name: 'forceBuild'
  type: boolean
  default: false
- name: 'projectsToBuild'
  type: object
  default:
    - path: "Services/Depots/ChargingStation.Depots"
      imageName: "depotsapi"
    - path: "Services/Aggregator/Aggregator"
      imageName: "aggregator"
    - path: "Services/Gateway/ChargingStation.Gateway"
      imageName: "gateway"
    - path: "Services/ChargePoints/ChargePoints.Api"
      imageName: "chargepointsapi"
    - path: "Services/ChargePoints/ChargePoints.Grpc"
      imageName: "chargepointsgrpc"
    - path: "Services/Connectors/Connectors.Api"
      imageName: "connectorsapi"
    - path: "Services/Connectors/Connectors.Grpc"
      imageName: "connectorsgrpc"
    - path: "Services/EnergyConsumption/EnergyConsumption.Api"
      imageName: "energyconsumptionapi"
    - path: "Services/EnergyConsumption/EnergyConsumption.Grpc"
      imageName: "energyconsumptiongrpc"

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '71b76521-feff-48e9-aef4-f0dd85171cdf'
  imageRepository: 'depotsapi'
  containerRegistry: 'yechuacr2508.azurecr.io'
  dockerBuildContext: '$(Build.SourcesDirectory)/ChargingStation.Backend'
  tag: '$(Build.BuildId)'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'    

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - ${{ each project in parameters.projectsToBuild }}:
    - job: 'Build_${{ project.imageName }}'
      displayName: 'Build and push image ${{ project.imageName }} into ACR'
      pool:
        vmImage: $(vmImageName)
      steps:

      - checkout: self
        fetchDepth: 2

      - bash: |
          # Get microservice project changes
          microserviceProjectChanged=$(git diff HEAD~ HEAD --name-only | grep -e "^${{ project.path }}")
          echo "##vso[task.setvariable variable=microserviceProjectChanged;isOutput=true]$microserviceProjectChanged"
          if [ ! -z "$microserviceProjectChanges" ]; then
            echo "Changes detected in ${{ project.imageName }}, image will be built..."
          else
            echo "No changes detected in ${{ project.imageName }}, image build will be skipped..."
          fi
      - task: Docker@2
        displayName: Build and push an image to container registry
        condition: eq(variables['microserviceProjectChanged'], $true)
        inputs:
          command: buildAndPush
          repository: ${{ project.imageName }}
          dockerfile: $(Build.SourcesDirectory)/ChargingStation.Backend/${{ project.path }}/Dockerfile
          containerRegistry: $(dockerRegistryServiceConnection)
          buildContext: $(dockerBuildContext)
          tags: |
            $(tag)