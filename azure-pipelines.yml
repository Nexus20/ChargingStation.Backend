# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

parameters:
- name: 'forceBuild'
  type: boolean
  default: false
- name: 'projectsToBuild'
  type: object
  default:
    - path: "Services/Depots/Depots.Api"
      imageName: "depotsapi"
    # - path: "Services/Depots/Depots.Grpc"
    #   imageName: "depotsgrpc"
    # - path: "Services/Aggregator/Aggregator"
    #   imageName: "aggregator"
    # - path: "Services/Gateway/ChargingStation.Gateway"
    #   imageName: "gateway"
    # - path: "Services/ChargePoints/ChargePoints.Api"
    #   imageName: "chargepointsapi"
    # - path: "Services/ChargePoints/ChargePoints.Grpc"
    #   imageName: "chargepointsgrpc"
    # - path: "Services/Connectors/Connectors.Api"
    #   imageName: "connectorsapi"
    # - path: "Services/Connectors/Connectors.Grpc"
    #   imageName: "connectorsgrpc"
    # - path: "Services/EnergyConsumption/EnergyConsumption.Api"
    #   imageName: "energyconsumptionapi"
    # - path: "Services/EnergyConsumption/EnergyConsumption.Grpc"
    #   imageName: "energyconsumptiongrpc"
    # - path: "Services/Transactions/Transactions.Api"
    #   imageName: "transactionsapi"
    # - path: "Services/Transactions/Transactions.Grpc"
    #   imageName: "transactionsgrpc"
    # - path: "Services/Reservations/Reservations.Api"
    #   imageName: "reservationsapi"
    # - path: "Services/Reservations/Reservations.Grpc"
    #   imageName: "reservationsgrpc"
    # - path: "Services/OcppTags/OcppTags.Api"
    #   imageName: "ocpptagsapi"
    # - path: "Services/OcppTags/OcppTags.Grpc"
    #   imageName: "ocpptagsgrpc"
    # - path: "Services/SignalR/ChargingStation.SignalR"
    #   imageName: "signalr"
    # - path: "Services/UserManagement/UserManagement.API"
    #   imageName: "usermanagement"
    # - path: "Services/WebSockets/ChargingStation.WebSockets"
    #   imageName: "websockets"
    # - path: "Services/ChargingProfiles/ChargingStation.ChargingProfiles"
    #   imageName: "chargingprofilesapi"
    # - path: "Services/Heartbeats/ChargingStation.Heartbeats"
    #   imageName: "heartbeatsapi"
    # - path: "Emulator/ChargePointEmulator.UI"
    #   imageName: "emulator"

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '9b0814d5-f32c-4e81-966e-e60f137ff9b2'
  imageRepository: 'depotsapi'
  containerRegistry: 'csmsacr0825.azurecr.io'
  dockerBuildContext: '$(Build.SourcesDirectory)/ChargingStation.Backend'
  tag: '$(Build.BuildId)'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  infrastructureProjectsPath: '$(Build.SourcesDirectory)/ChargingStation.Backend/Infrastructure'
  domainProjectsPath: '$(Build.SourcesDirectory)/ChargingStation.Backend/Domain'

pool:
  vmImage: $(vmImageName)

stages:
- ${{ each project in parameters.projectsToBuild }}:
  - stage: 'Build_${{project.imageName}}'
    displayName: 'Build and push ${{project.imageName}}'
    jobs:

    - job: 'DetectChanges'
      displayName: 'Detecting changes for ${{ project.imageName }}'
      
      steps:

      - checkout: self
        fetchDepth: 2

      - bash: |
          # Get microservice project changes
          MicroserviceProjectChanged=$(git diff HEAD~ HEAD --name-only | grep -e "^${{ project.path }}")
          if [ ! -z "$MicroserviceProjectChanged" ]; then
            echo "##vso[task.setvariable variable=MicroserviceProjectChanged;isOutput=true]true"
            echo "Changes detected in ${{ project.imageName }}, image will be built..."
          else
            echo "##vso[task.setvariable variable=MicroserviceProjectChanged;isOutput=true]false"
            echo "No changes detected in ${{ project.imageName }}, image build will be skipped..."
          fi
        name: 'MicroserviceChanges'
        displayName: 'Detecting changes in ${{ project.imageName }}'
      
      - bash: |
          # Get common projects changes
          InfrastructurePorjectsChanged=$(git diff HEAD~ HEAD --name-only | grep -e "^${{ variables.infrastructureProjectsPath }}")
          DomainProjectsChanged=$(git diff HEAD~ HEAD --name-only | grep -e "^${{ variables.domainProjectsPath }}")

          if [ ! -z "$InfrastructurePorjectsChanged" ] || [ ! -z "$DomainProjectsChanged" ]; then
            echo "##vso[task.setvariable variable=CommonProjectsChanged;isOutput=true]true"
            echo "Changes detected in common projects, ${{ project.imageName }} image will be built..."
          else
            echo "##vso[task.setvariable variable=CommonProjectsChanged;isOutput=true]false"
            echo "No changes detected in common projects, ${{ project.imageName }} image build will be skipped..."
          fi
        name: 'CommonProjectsChanges'
        displayName: 'Detecting changes in common projects'

    - job: 'Build_${{ project.imageName }}'
      displayName: 'Build and push image ${{ project.imageName }} into ACR'
  
      ${{ if not(parameters.forceBuild) }}:
        dependsOn: 'DetectChanges'
        condition: eq(dependencies.DetectChanges.outputs['MicroserviceChanges.MicroserviceProjectChanged'], 'true')
        
      steps:
  
      - checkout: self
        fetchDepth: 2

      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: ${{ project.imageName }}
          dockerfile: $(Build.SourcesDirectory)/ChargingStation.Backend/${{ project.path }}/Dockerfile
          containerRegistry: $(dockerRegistryServiceConnection)
          buildContext: $(dockerBuildContext)
          tags: |
            $(tag)
    